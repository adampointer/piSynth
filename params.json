{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Node.js and C++ based FM Synthesiser for the Raspberry Pi","body":"## What is it? ##\r\n\r\nThis is an FM synthesiser with a browser front-end for fiddling about with and tweaking all the synthesis parameters. I am using it on a Raspberry Pi but it could be used on any platform that can feasibly compile and run it.\r\n\r\n## Node.js? Why? ##\r\n\r\nActually Node.js is a good fit for this project, aside from the fact that it is super-trendy at the moment. It handles events very well and a MIDI input to PCM output with an HTTP interface is largely about events. A key is pressed on the keyboard triggering a MIDI event, this needs to be handled and trigger a note to be played. An envelope is modified in the HTTP interface firing a PUT request to the server, again, this is an event. Although anything involving hardware is written in C/C++, node.js is perfect for quickly and elegantly glueing everything together. And it is fun.\r\n\r\n## Is it ready for use? ##\r\n\r\nNo. It plays basic sounds and you can change the ADSR envelope. Performance is poor on the Raspberry Pi but compiling the PCM module to use the FPU should help. I want to implement some kind of LUT/simple caching for the waveform generation. That will also help massively. Also I have loads more params that I want to be controlled from the browser and then I want to be able to load/save settings.\r\n\r\n## How to use? ##\r\n\r\nCompile the PCM modules with node-gyp, run the synth, then connect to the hardware.\r\n\r\n`node-gyp configure build`\r\n`node pi-synth.js`\r\n`aconnect -i`\r\n`aconnect -o`\r\n\r\nMake a note of the id of your MIDI keybaoard (real or virtual) and the id of the synth and glue them together.\r\n\r\n`aconnect <IN> <OUT>` ","google":"","name":"piSynth"}